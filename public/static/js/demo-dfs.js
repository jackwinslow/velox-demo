/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./demo-dfs/lib/main.js":
/*!******************************!*\
  !*** ./demo-dfs/lib/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var velox_songbird__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! velox-songbird */ \"./node_modules/velox-songbird/build/velox-bundle.js\");\n/* harmony import */ var velox_songbird__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(velox_songbird__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst files = new Map();\nconst file_callbacks = new Map();\nconst requested = new Map();\nconst peers = new Map();\nlet peer_target = 0;\nlet sr = false;\n\nlet velox_enabled = sessionStorage.getItem(\"ve\") ? sessionStorage.getItem(\"ve\") : \"false\"\n\nif (velox_enabled == \"true\") {\n    const v = new velox_songbird__WEBPACK_IMPORTED_MODULE_0__.Velox(\n        \"ws:139.144.30.74:80/nest\", \n        {\n            iceServers: [\n                {\n                    urls: [ \"stun:us-turn3.xirsys.com\" ]\n                }, \n                {\n                    username: \"7XSuZRhbYKu105TrkOEwcH2tPN-zWZDZw_72u2UQNZXq0FAQF8xjpFMP3eYERIicAAAAAGQPSt5wYXJsZW9u\",\n                    credential: \"8534c818-c1b9-11ed-987c-0242ac140004\",\n                    urls: [\n                        \"turn:us-turn3.xirsys.com:80?transport=udp\",\n                        //\"turn:us-turn3.xirsys.com:3478?transport=udp\",\n                        //\"turn:us-turn3.xirsys.com:80?transport=tcp\",\n                        //\"turn:us-turn3.xirsys.com:3478?transport=tcp\",\n                        //\"turns:us-turn3.xirsys.com:443?transport=tcp\",\n                        //\"turns:us-turn3.xirsys.com:5349?transport=tcp\"\n                    ]\n                }\n            ]\n        }\n    );\n\n    v.registerMessage(\"PC\", (m) => {\n            if (peer_target == 0) {\n                peer_target = Math.floor(m.Body/4)+1\n            }\n            if (peers.size >= peer_target && sr == false) {\n                sr == true\n                for (const k of file_callbacks.keys()) {    \n                    if (!files.has(k)) {\n                        const time_start = Date.now()\n                        requested.set(k)\n\n                        const reqing = [...peers.keys()][[Math.floor(Math.random() * peers.size)]]\n                        v.requestBlob(k, [reqing]).then((b) => {\n                            if (!files.has(k)) {\n                                console.log(\"injecting from peer:\", k, \"| Time:\", Date.now()-time_start)\n                                files.set(k, b)\n                                file_callbacks.get(k)()\n                                document.dispatchEvent(new CustomEvent('RU', {\n                                    detail: {\n                                        elapsed: Date.now()-time_start,\n                                        peer_fetched: true,\n                                        from: reqing\n                                    }\n                                }))\n                            }\n                        })\n                        setTimeout( async () => {\n                            if (!files.has(k)) {\n                                const response = await fetch(`http://139.144.30.74:8080/${k}`)\n                                const nb = await response.blob()\n                                const nf = new Blob([nb], {\n                                    type: nb.type,\n                                });\n                                files.set(k, nf)\n                                file_callbacks.get(k)()\n                                v.mountBlob(k, nf)\n                                console.log(\"injecting from server:\", k, \"| Time:\", Date.now()-time_start)\n                                document.dispatchEvent(new CustomEvent('RU', {\n                                    detail: {\n                                        elapsed: Date.now()-time_start,\n                                        peer_fetched: false,\n                                    }\n                                }))\n                            }\n                        }, 3500)\n\n                    }\n                }\n            }\n\n    })\n\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n\n        const toBlob = document.querySelectorAll(\"[data-src]\")\n            \n        for(var i = 0; i < toBlob.length; i++) {\n            const n = i\n            const path = toBlob[i].getAttribute(\"data-src\")\n            toBlob[n].removeAttribute(\"data-src\")\n            file_callbacks.set(path, () => {\n                const furl = URL.createObjectURL(files.get(path))\n                toBlob[n].setAttribute(\"src\", furl)\n            })\n        }\n\n        v.connect(\"image-demo\");\n\n        v.onchannelopen((peer) => {\n                console.log(\"opened connection to:\", peer)\n                peers.set(peer)\n                v.send({Type: \"PC\", Body:peers.size},[peer])\n            }\n        )\n\n        v.onchannelclose((peer) => {\n            console.log(\"closed connection to:\", peer)\n            peers.delete(peer)\n            }\n        )\n\n\n    }) \n\n} else {\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n\n        const toBlob = document.querySelectorAll(\"[data-src]\")\n            \n        for(var i = 0; i < toBlob.length; i++) {\n            const n = i\n            const path = toBlob[i].getAttribute(\"data-src\")\n            toBlob[n].removeAttribute(\"data-src\")\n            file_callbacks.set(path, () => {\n                const furl = URL.createObjectURL(files.get(path))\n                toBlob[n].setAttribute(\"src\", furl)\n            })\n        }\n    \n\n        for (const k of file_callbacks.keys()) {    \n            if (!files.has(k)) {\n                const time_start = Date.now()\n                setTimeout( async () => {\n                    if (!files.has(k)) {\n                        const response = await fetch(`http://139.144.30.74:8080/${k}`)\n                        const nb = await response.blob()\n                        const nf = new Blob([nb], {\n                            type: nb.type,\n                        });\n                        files.set(k, nf)\n                        file_callbacks.get(k)()\n                        v.mountBlob(k, nf)\n                        console.log(\"injecting from server:\", k, \"| Time:\", Date.now()-time_start)\n                        document.dispatchEvent(new CustomEvent('RU', {\n                            detail: {\n                                elapsed: Date.now()-time_start,\n                                peer_fetched: false,\n                            }\n                        }))\n                    }\n                }, 3500)\n            }\n        }\n    })\n}\n\n//# sourceURL=webpack://demo/./demo-dfs/lib/main.js?");

/***/ }),

/***/ "./node_modules/velox-songbird/build/velox-bundle.js":
/*!***********************************************************!*\
  !*** ./node_modules/velox-songbird/build/velox-bundle.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(self, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./node_modules/spark-md5/spark-md5.js\":\n/*!*********************************************!*\\\n  !*** ./node_modules/spark-md5/spark-md5.js ***!\n  \\*********************************************/\n/***/ ((module) => {\n\n(function (factory) {\n    if (true) {\n        // Node/CommonJS\n        module.exports = factory();\n    } else { var glob; }\n}(function (undefined) {\n\n    'use strict';\n\n    /*\n     * Fastest md5 implementation around (JKM md5).\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n\n    function cmn(q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    function md5cycle(x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a += (b & c | ~b & d) + k[0] - 680876936 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[1] - 389564586 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[2] + 606105819 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[4] - 176418897 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[7] - 45705983 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[10] - 42063 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;\n        a  = (a << 7 | a >>> 25) + b | 0;\n        d += (a & b | ~a & c) + k[13] - 40341101 | 0;\n        d  = (d << 12 | d >>> 20) + a | 0;\n        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;\n        c  = (c << 17 | c >>> 15) + d | 0;\n        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;\n        b  = (b << 22 | b >>> 10) + c | 0;\n\n        a += (b & d | c & ~d) + k[1] - 165796510 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[11] + 643717713 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[0] - 373897302 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[5] - 701558691 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[10] + 38016083 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[15] - 660478335 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[4] - 405537848 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[9] + 568446438 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[3] - 187363961 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;\n        a  = (a << 5 | a >>> 27) + b | 0;\n        d += (a & c | b & ~c) + k[2] - 51403784 | 0;\n        d  = (d << 9 | d >>> 23) + a | 0;\n        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;\n        c  = (c << 14 | c >>> 18) + d | 0;\n        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;\n        b  = (b << 20 | b >>> 12) + c | 0;\n\n        a += (b ^ c ^ d) + k[5] - 378558 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[14] - 35309556 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[7] - 155497632 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[13] + 681279174 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[0] - 358537222 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[3] - 722521979 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[6] + 76029189 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n        a += (b ^ c ^ d) + k[9] - 640364487 | 0;\n        a  = (a << 4 | a >>> 28) + b | 0;\n        d += (a ^ b ^ c) + k[12] - 421815835 | 0;\n        d  = (d << 11 | d >>> 21) + a | 0;\n        c += (d ^ a ^ b) + k[15] + 530742520 | 0;\n        c  = (c << 16 | c >>> 16) + d | 0;\n        b += (c ^ d ^ a) + k[2] - 995338651 | 0;\n        b  = (b << 23 | b >>> 9) + c | 0;\n\n        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;\n        b  = (b << 21 |b >>> 11) + c | 0;\n        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;\n        a  = (a << 6 | a >>> 26) + b | 0;\n        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;\n        d  = (d << 10 | d >>> 22) + a | 0;\n        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;\n        c  = (c << 15 | c >>> 17) + d | 0;\n        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;\n        b  = (b << 21 | b >>> 11) + c | 0;\n\n        x[0] = a + x[0] | 0;\n        x[1] = b + x[1] | 0;\n        x[2] = c + x[2] | 0;\n        x[3] = d + x[3] | 0;\n    }\n\n    function md5blk(s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    function md5blk_array(a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    }\n\n    function md51(s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    }\n\n    function md51_array(a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    }\n\n    function rhex(n) {\n        var s = '',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    // In some cases the fast add32 function cannot be used..\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * ArrayBuffer slice polyfill.\n     *\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\n     */\n\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n        (function () {\n            function clamp(val, length) {\n                val = (val | 0) || 0;\n\n                if (val < 0) {\n                    return Math.max(val + length, 0);\n                }\n\n                return Math.min(val, length);\n            }\n\n            ArrayBuffer.prototype.slice = function (from, to) {\n                var length = this.byteLength,\n                    begin = clamp(from, length),\n                    end = length,\n                    num,\n                    target,\n                    targetArray,\n                    sourceArray;\n\n                if (to !== undefined) {\n                    end = clamp(to, length);\n                }\n\n                if (begin > end) {\n                    return new ArrayBuffer(0);\n                }\n\n                num = end - begin;\n                target = new ArrayBuffer(num);\n                targetArray = new Uint8Array(target);\n\n                sourceArray = new Uint8Array(this, begin, num);\n                targetArray.set(sourceArray);\n\n                return target;\n            };\n        })();\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * Helpers.\n     */\n\n    function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        return str;\n    }\n\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n           buff = new ArrayBuffer(length),\n           arr = new Uint8Array(buff),\n           i;\n\n        for (i = 0; i < length; i += 1) {\n            arr[i] = str.charCodeAt(i);\n        }\n\n        return returnUInt8Array ? arr : buff;\n    }\n\n    function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n    }\n\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n\n        return returnUInt8Array ? result : result.buffer;\n    }\n\n    function hexToBinaryString(hex) {\n        var bytes = [],\n            length = hex.length,\n            x;\n\n        for (x = 0; x < length - 1; x += 2) {\n            bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n\n        return String.fromCharCode.apply(String, bytes);\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n\n    function SparkMD5() {\n        // call reset to init the instance\n        this.reset();\n    }\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // Converts the string to utf8 bytes if necessary\n        // Then append as binary\n        this.appendBinary(toUtf8(str));\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substring(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = '';\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.prototype.getState = function () {\n        return {\n            buff: this._buff,\n            length: this._length,\n            hash: this._hash.slice()\n        };\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other additional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._hash, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n    };\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} [raw] True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // Converts the string to utf8 bytes if necessary\n        // Then compute it using the binary function\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n\n        // Convert buffer to a string\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n\n        return state;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        // Convert string to buffer\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\n        return SparkMD5.prototype.setState.call(this, state);\n    };\n\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    return SparkMD5;\n}));\n\n\n/***/ }),\n\n/***/ \"./lib/web/channel.ts\":\n/*!****************************!*\\\n  !*** ./lib/web/channel.ts ***!\n  \\****************************/\n/***/ ((__unused_webpack_module, exports, __nested_webpack_require_23482__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Channel = void 0;\nconst interfaces_1 = __nested_webpack_require_23482__(/*! ./interfaces */ \"./lib/web/interfaces.ts\");\nconst velox_1 = __nested_webpack_require_23482__(/*! ./velox */ \"./lib/web/velox.ts\");\nclass Channel {\n    constructor(SNMHandler, RCMHandler, CMUHandler, MBHandler, BlobMount, RTCConfig) {\n        this._SCMQueue = [];\n        this._active = false;\n        this._SNMHandler = SNMHandler;\n        this._RCMHandler = RCMHandler;\n        this._CMUHandler = CMUHandler;\n        this._MBHandler = MBHandler;\n        this._BMAccess = BlobMount;\n        if (RTCConfig) {\n            this._peerConnection = new RTCPeerConnection(RTCConfig);\n        }\n        else {\n            this._peerConnection = new RTCPeerConnection({\n                iceServers: [\n                    {\n                        urls: \"stun:stun.1.google.com:19302\"\n                    }\n                ]\n            });\n        }\n    }\n    SCMProcessor(msg) {\n        const msgStr = JSON.stringify(msg);\n        const bytes = new TextEncoder().encode(msgStr);\n        const blob = new Blob([bytes], {\n            type: \"application/json;charset=utf-8\"\n        });\n        blob.arrayBuffer().then((blobData) => {\n            if (this._active) {\n                this._dataChannel.send(blobData);\n            }\n            else {\n                this._SCMQueue.push(msg);\n            }\n        });\n    }\n    RawMessage(ab) {\n        this._dataChannel.send(ab);\n    }\n    executeSCMQueue() {\n        while (this._SCMQueue.length > 0) {\n            this.SCMProcessor(this._SCMQueue.pop());\n        }\n    }\n    RNMProcessor(message) {\n        if (message.Type == interfaces_1.RecievableNestMessageType.StartHandshake) {\n            this._peerUUID = message.UUID;\n            this._dataChannel = this._peerConnection.createDataChannel(\"m\");\n            this._dataChannel.binaryType = \"arraybuffer\";\n            this._dataChannel.onmessage = (ev) => this._onmessageHandler(ev);\n            this._dataChannel.onopen = (ev) => this._onOpenHandler(ev);\n            this._dataChannel.onclose = (ev) => this._onCloseHandler(ev);\n            this._peerConnection.createOffer().then((offer) => {\n                this._peerConnection.setLocalDescription(offer);\n                const msg = {\n                    UUID: this._peerUUID,\n                    SDPOffer: offer,\n                    Type: interfaces_1.SendableNestMessageType.Offer\n                };\n                this._SNMHandler(msg);\n            });\n        }\n        else if (message.Type == interfaces_1.RecievableNestMessageType.Offer) {\n            this._peerUUID = message.UUID;\n            this._peerConnection.ondatachannel = (ev) => {\n                this._dataChannel = ev.channel;\n                this._dataChannel.binaryType = \"arraybuffer\";\n                this._dataChannel.onmessage = (ev) => this._onmessageHandler(ev);\n                this._dataChannel.onopen = (ev) => this._onOpenHandler(ev);\n                this._dataChannel.onclose = (ev) => this._onCloseHandler(ev);\n            };\n            this._peerConnection.setRemoteDescription(new RTCSessionDescription(message.SDPOffer));\n            this._peerConnection.createAnswer().then((answer) => {\n                this._peerConnection.setLocalDescription(answer);\n                const msg = {\n                    UUID: this._peerUUID,\n                    SDPOffer: answer,\n                    Type: interfaces_1.SendableNestMessageType.Answer\n                };\n                this._SNMHandler(msg);\n                this._peerConnection.onicecandidate = ({ candidate }) => {\n                    const msg = {\n                        UUID: this._peerUUID,\n                        Candidate: candidate,\n                        Type: interfaces_1.SendableNestMessageType.ICE\n                    };\n                    this._SNMHandler(msg);\n                };\n            });\n        }\n        else if (message.Type == interfaces_1.RecievableNestMessageType.Answer) {\n            this._peerConnection.setRemoteDescription(new RTCSessionDescription(message.SDPOffer));\n            this._peerConnection.onicecandidate = ({ candidate }) => {\n                const msg = {\n                    UUID: this._peerUUID,\n                    Candidate: candidate,\n                    Type: interfaces_1.SendableNestMessageType.ICE\n                };\n                this._SNMHandler(msg);\n            };\n        }\n        else if (message.Type == interfaces_1.RecievableNestMessageType.ICE) {\n            this._peerConnection.addIceCandidate(message.Candidate);\n        }\n        else {\n            console.log(\"default\");\n        }\n    }\n    _onOpenHandler(ev) {\n        this._active = true;\n        const meta_update = { Peer: this._peerUUID, Update: \"Opened\" };\n        this._CMUHandler(meta_update);\n        this.executeSCMQueue();\n    }\n    _onmessageHandler(ev) {\n        const h = (0, velox_1.hashAB)(ev.data);\n        if (!this._BMAccess.has(h)) {\n            this._BMAccess.set(h, ev.data);\n            this._MBHandler({ Hash: h });\n        }\n        try {\n            const jsonString = new TextDecoder().decode(ev.data);\n            const msg = JSON.parse(jsonString);\n            this._RCMHandler(Object.assign(Object.assign({}, msg), { UUID: this._peerUUID }));\n        }\n        catch (e) {\n        }\n    }\n    _onCloseHandler(ev) {\n        const meta_update = { Peer: this._peerUUID, Update: \"Closed\" };\n        this._CMUHandler(meta_update);\n    }\n}\nexports.Channel = Channel;\n\n\n/***/ }),\n\n/***/ \"./lib/web/interfaces.ts\":\n/*!*******************************!*\\\n  !*** ./lib/web/interfaces.ts ***!\n  \\*******************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SendableNestMessageType = exports.RecievableNestMessageType = void 0;\nvar RecievableNestMessageType;\n(function (RecievableNestMessageType) {\n    RecievableNestMessageType[\"Initial\"] = \"IN\";\n    RecievableNestMessageType[\"StartHandshake\"] = \"SH\";\n    RecievableNestMessageType[\"Offer\"] = \"OF\";\n    RecievableNestMessageType[\"Answer\"] = \"AN\";\n    RecievableNestMessageType[\"ICE\"] = \"C\";\n})(RecievableNestMessageType = exports.RecievableNestMessageType || (exports.RecievableNestMessageType = {}));\nvar SendableNestMessageType;\n(function (SendableNestMessageType) {\n    SendableNestMessageType[\"Initial\"] = \"IN\";\n    SendableNestMessageType[\"Offer\"] = \"OF\";\n    SendableNestMessageType[\"Answer\"] = \"AN\";\n    SendableNestMessageType[\"ICE\"] = \"C\";\n})(SendableNestMessageType = exports.SendableNestMessageType || (exports.SendableNestMessageType = {}));\n\n\n/***/ }),\n\n/***/ \"./lib/web/nest.ts\":\n/*!*************************!*\\\n  !*** ./lib/web/nest.ts ***!\n  \\*************************/\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Nest = void 0;\nclass Nest {\n    constructor(sockAddr, RNMHandler) {\n        this._active = false;\n        this._sockAddr = \"ws:139.144.30.74:80/nest\";\n        if (sockAddr !== undefined) {\n            this._sockAddr = sockAddr;\n        }\n        this._ws = new WebSocket(this._sockAddr);\n        this._ws.onopen = () => {\n            this._active = true;\n            console.log(\"opened connection to nest\");\n        };\n        this._ws.onmessage = (event) => {\n            const message = JSON.parse(event.data);\n            RNMHandler(message);\n        };\n        this._ws.onclose = () => {\n            console.log(\"connection with the nest has been closed\");\n            this._active = false;\n        };\n        this._ws.onerror = (event) => {\n            console.log(event);\n            this._ws.close;\n        };\n    }\n    isActive() {\n        return this._active;\n    }\n    SNMProcessor(SNM) {\n        const dta = JSON.stringify(SNM);\n        this._ws.send(dta);\n    }\n}\nexports.Nest = Nest;\n\n\n/***/ }),\n\n/***/ \"./lib/web/velox.ts\":\n/*!**************************!*\\\n  !*** ./lib/web/velox.ts ***!\n  \\**************************/\n/***/ ((__unused_webpack_module, exports, __nested_webpack_require_31643__) => {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashAB = exports.Velox = void 0;\nconst channel_1 = __nested_webpack_require_31643__(/*! ./channel */ \"./lib/web/channel.ts\");\nconst nest_1 = __nested_webpack_require_31643__(/*! ./nest */ \"./lib/web/nest.ts\");\nconst interfaces_1 = __nested_webpack_require_31643__(/*! ./interfaces */ \"./lib/web/interfaces.ts\");\nconst SparkMD5 = __nested_webpack_require_31643__(/*! spark-md5 */ \"./node_modules/spark-md5/spark-md5.js\");\nclass Velox {\n    constructor(socketAddr, RTCConfig) {\n        this._beacon = new EventTarget();\n        this._mountedBlobs = new Map();\n        this._blobInfo = new Map();\n        this._blobRLookup = new Map();\n        this._onChannelOpened = (UUID) => console.log(UUID + \" Opened\");\n        this._onChannelClosed = (UUID) => console.log(UUID + \" Closed\");\n        this._activeChannels = new Map();\n        this._messageCallbackMap = new Map();\n        this._defaultMessageCallback = (cm) => { console.log(cm); };\n        const RCMHandler = (message) => {\n            this._beacon.dispatchEvent(new CustomEvent(\"RCM\", { detail: { CM: message } }));\n        };\n        const SNMHandler = (message) => {\n            this._beacon.dispatchEvent(new CustomEvent(\"SNM\", { detail: { SNM: message } }));\n        };\n        const RNMHandler = (message) => {\n            this._beacon.dispatchEvent(new CustomEvent(\"RNM\", { detail: { RNM: message } }));\n        };\n        const CMUHandler = (message) => {\n            this._beacon.dispatchEvent(new CustomEvent(\"CMU\", { detail: { CMU: message } }));\n        };\n        const MBHandler = (message) => {\n            this._beacon.dispatchEvent(new CustomEvent(\"MB\", { detail: { Hash: message.Hash } }));\n        };\n        this._beacon.addEventListener(\"MB\", (event) => {\n            const h = event.detail.Hash;\n            if (this._mountedBlobs.has(h) && this._blobInfo.has(h)) {\n                this._beacon.dispatchEvent(new CustomEvent(\"BMC\", { detail: { Id: this._blobInfo.get(h).Id, Type: this._blobInfo.get(h).Type, AB: this._mountedBlobs.get(h) } }));\n            }\n        });\n        this._beacon.addEventListener(\"RNM\", (event) => {\n            const message = event.detail.RNM;\n            if (message.Type == interfaces_1.RecievableNestMessageType.Initial) {\n                this._UUID = message.UUID;\n            }\n            else if (message.Type == interfaces_1.RecievableNestMessageType.StartHandshake || message.Type == interfaces_1.RecievableNestMessageType.Offer) {\n                this._activeChannels.set(message.UUID, new channel_1.Channel(SNMHandler, RCMHandler, CMUHandler, MBHandler, this._mountedBlobs, RTCConfig));\n                this._beacon.addEventListener(message.UUID, (event) => {\n                    this._activeChannels.get(message.UUID).RNMProcessor(event.detail.RNM);\n                });\n                this._beacon.dispatchEvent(new CustomEvent(message.UUID, { detail: { RNM: message } }));\n            }\n            else if (message.UUID != null) {\n                this._beacon.dispatchEvent(new CustomEvent(message.UUID, { detail: { RNM: message } }));\n            }\n        });\n        this._beacon.addEventListener(\"SNM\", (event) => {\n            const message = event.detail.SNM;\n            if (message.UUID == null) {\n                this._nest.SNMProcessor(Object.assign(Object.assign({}, message), { UUID: this._UUID }));\n            }\n            else {\n                this._nest.SNMProcessor(message);\n            }\n        });\n        this._beacon.addEventListener(\"RCM\", (event) => {\n            const message = event.detail.CM;\n            if (message.BlobRelay != undefined) {\n                if (message.BlobRelay == \"id\") {\n                    if (this._blobRLookup.has(message.Body)) {\n                        const h = this._blobRLookup.get(message.Body);\n                        this.send({ BlobRelay: \"h\",\n                            Body: {\n                                Hash: h, Info: this._blobInfo.get(h)\n                            }\n                        }, [message.UUID]);\n                        this.sendBlob(h, [message.UUID]);\n                    }\n                }\n                else if (message.BlobRelay == \"h\") {\n                    if (!this._blobInfo.has(message.Body.Hash)) {\n                        this._blobInfo.set(message.Body.Hash, message.Body.Info);\n                    }\n                    MBHandler({ Hash: message.Body.Hash });\n                }\n            }\n            else {\n                const f = this._messageCallbackMap.get(message.Type);\n                if (f == undefined) {\n                    this._defaultMessageCallback(message);\n                }\n                else {\n                    f(message);\n                }\n            }\n        });\n        this._beacon.addEventListener(\"CMU\", (event) => {\n            const message = event.detail.CMU;\n            if (message.Update == \"Opened\") {\n                this._onChannelOpened(message.Peer);\n            }\n            else if (message.Update == \"Closed\") {\n                this._onChannelClosed(message.Peer);\n            }\n        });\n        this._nest = new nest_1.Nest(socketAddr, RNMHandler);\n    }\n    connect(networkID) {\n        const message = { Type: interfaces_1.SendableNestMessageType.Initial, Other: networkID };\n        const x = setInterval(() => {\n            if (this._nest.isActive()) {\n                this._beacon.dispatchEvent(new CustomEvent(\"SNM\", { detail: { SNM: message } }));\n                clearInterval(x);\n            }\n        }, 10);\n    }\n    registerMessage(type, callback) {\n        this._messageCallbackMap.set(type, callback);\n    }\n    registerDefault(callback) {\n        this._defaultMessageCallback = callback;\n    }\n    onchannelopen(callback) {\n        this._onChannelOpened = callback;\n    }\n    onchannelclose(callback) {\n        this._onChannelClosed = callback;\n    }\n    send(cm, users) {\n        if (users == undefined || users.length == 0) {\n            for (const [key, channel] of this._activeChannels.entries()) {\n                channel.SCMProcessor(cm);\n            }\n        }\n        else {\n            for (const user of users) {\n                const channel = this._activeChannels.get(user);\n                channel.SCMProcessor(cm);\n            }\n        }\n    }\n    requestBlob(id, users) {\n        this.send({ BlobRelay: \"id\", Body: id }, users);\n        return new Promise((resolve) => {\n            this._beacon.addEventListener(\"BMC\", (event) => {\n                if (event.detail.Id == id) {\n                    const b = new Blob([event.detail.AB], { type: event.detail.Type });\n                    resolve(b);\n                    this.mountBlob(id, b);\n                }\n            });\n        });\n    }\n    mountBlob(id, blob) {\n        const type = blob.type;\n        blob.arrayBuffer().then((ab) => {\n            const hash = hashAB(ab);\n            this._blobInfo.set(hash, { Id: id, Type: type });\n            this._mountedBlobs.set(hash, ab);\n            this._blobRLookup.set(id, hash);\n        });\n    }\n    sendBlob(hash, users) {\n        if (this._mountedBlobs.has(hash)) {\n            const ab = this._mountedBlobs.get(hash);\n            if (users == undefined || users.length == 0) {\n                for (const [key, channel] of this._activeChannels.entries()) {\n                    channel.RawMessage(ab);\n                }\n            }\n            else {\n                for (const user of users) {\n                    const channel = this._activeChannels.get(user);\n                    channel.RawMessage(ab);\n                }\n            }\n        }\n    }\n}\nexports.Velox = Velox;\nfunction hashAB(ab) {\n    return SparkMD5.ArrayBuffer.hash(ab, true);\n}\nexports.hashAB = hashAB;\n\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_39641__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_39641__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module is referenced by other modules so it can't be inlined\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_39641__(\"./lib/web/velox.ts\");\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n//# sourceURL=webpack://demo/./node_modules/velox-songbird/build/velox-bundle.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./demo-dfs/lib/main.js");
/******/ 	
/******/ })()
;